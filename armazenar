<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Painel do Cliente</title>
    <link rel="stylesheet" href="../src/css/index.css">
    <link rel="icon" href="./favicon.ico">
</head>
<body>
    <header>
        <div class="logo">
            <img src="https://logforall.com.br/img/component/toolbar/Logo-log4.png" alt="Logo da Transportadora">
        </div>
        <nav>
            <a href="#" class="btn">Início</a>
            <a href="#" class="btn">Log4</a>
            <a href="#" class="btn">Suporte</a>
            <!-- Dropdown para Minha Conta -->
            <div class="dropdown">
                <button onclick="toggleDropdown()" class="dropbtn">Minha Conta</button>
                <div id="dropdown-content" class="dropdown-content">
                    <a href="#" id="edit-profile">Editar Perfil</a>
                    <a href="#" id="dark-mode">Modo Escuro</a>
                </div>
            </div>
        </nav>
    </header>

    <main>
        <div class="container">
            <div class="section">
                <h2>Monitoramento em Tempo Real</h2>
                <table class="interactive-table" id="real-time-table">
                    <thead>
                        <tr>
                            <th>Produto</th>
                            <th>Endereço</th>
                            <th>Código Chave</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Dados serão carregados dinamicamente aqui -->
                    </tbody>
                </table>
            </div>

            <section class="hp">
                <h2>Histórico de Pedidos</h2>
                <table class="interactive-table">
                    <thead>
                        <tr>
                            <th>Data</th>
                            <th>Produto</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody id="order-history">
                        <!-- Dados serão carregados dinamicamente aqui -->
                    </tbody>
                </table>
            </section>

            <div class="section-Gráfico">
                <h2>Gráfico de Monitoramento</h2>
                <div class="chart-container">
                    <canvas id="monitoringChart"></canvas>
                </div>
            </div>

            <div class="freight-simulator">
                <h1>Novo Produto</h1>
                <form id="freight-form">
                    <div class="form-row">
                        <div class="form-group half-width">
                            <label for="origin">Bairro de Origem:</label>
                            <input type="text" id="origin" name="origin" required>
                        </div>
                        <div class="form-group half-width">
                            <label for="cep">CEP de Origem:</label>
                            <input type="text" id="cep" name="cep" required>
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group third-width">
                            <label for="length">Comprimento (cm):</label>
                            <input type="number" id="length" name="length" required>
                        </div>
                        <div class="form-group third-width">
                            <label for="width">Largura (cm):</label>
                            <input type="number" id="width" name="width" required>
                        </div>
                        <div class="form-group third-width">
                            <label for="height">Altura (cm):</label>
                            <input type="number" id="height" name="height" required>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="weight">Peso (kg):</label>
                        <input type="number" id="weight" name="weight" required>
                    </div>
                    <div class="form-group">
                        <label for="destination">CEP de Destino:</label>
                        <input type="text" id="destination" name="destination" required onblur="fetchAddressByCep('destination', 'address', 'street', 'state')">
                    </div>
                    <div class="form-group">
                        <label for="address">Endereço:</label>
                        <input type="text" id="address" name="address" readonly>
                    </div>
                    <div class="form-group">
                        <label for="street">Rua:</label>
                        <input type="text" id="street" name="street" readonly>
                    </div>
                    <div class="form-row">
                        <div class="form-group half-width">
                            <label for="state">Estado:</label>
                            <input type="text" id="state" name="state" readonly>
                        </div>
                        <div class="form-group half-width">
                            <label for="number">Número:</label>
                            <input type="text" id="number" name="number" required>
                        </div>
                    </div>

                    <div class="form-group">
                        <label for="complement">Complemento:</label>
                        <input type="text" id="complement" name="complement" maxlength="20">
                    </div>
                    
                    <div class="form-group">
                        <label for="freight-value">Valor da Carga (R$):</label>
                        <input type="number" id="freight-value" name="freight-value" required>
                    </div>
                    <div class="form-group">
                        <label for="additional-info">Informações Adicionais:</label>
                        <textarea id="additional-info" name="additional-info" rows="4"></textarea>
                    </div>
                    <button type="submit">Adicionar Produto</button>
                </form>
            </div>
        </div>
    </main>

    <footer>
        <div class="footerContainer">
            <div class="socialIcons">
                <a href=""><i class="fa-brands fa-facebook"></i></a>
                <a href=""><i class="fa-brands fa-instagram"></i></a>
                <a href=""><i class="fa-brands fa-twitter"></i></a>
            </div>
            <div class="footerNav">
                <ul>
                    <li><a href="">Home</a></li>
                    <li><a href="">Log4</a></li>
                    <li><a href="">Suporte</a></li>
                    <li><a href="">Minha Conta</a></li>
                </ul>
            </div>
        </div>
        <div class="footerBottom">
            <p>Copyright &copy;2023; Designed by <span class="designer">Noman</span></p>
        </div>
    </footer>

    <script src="https://unpkg.com/firebase@10.12.4/dist/firebase-app.js"></script>
    <script src="https://unpkg.com/firebase@10.12.4/dist/firebase-auth.js"></script>
    <script src="https://unpkg.com/firebase@10.12.4/dist/firebase-firestore.js"></script>
    <script src="https://unpkg.com/firebase@10.12.4/dist/firebase-analytics.js"></script>
    <script type="module" src="../src/js/index.js"></script>
    <script src="./assets/main.bundle.js"></script>
    <script src="./assets/main.bundle.js.gz"></script>
    <script src="./assets/909.bundle.js"></script>
    <script src="./assets/909.bundle.js.gz"></script>

    <script>
        function toggleDropdown() {
            document.getElementById("dropdown-content").classList.toggle("show");
        }

        window.onclick = function (event) {
            if (!event.target.matches('.dropbtn')) {
                var dropdowns = document.getElementsByClassName("dropdown-content");
                for (var i = 0; i < dropdowns.length; i++) {
                    var openDropdown = dropdowns[i];
                    if (openDropdown.classList.contains('show')) {
                        openDropdown.classList.remove('show');
                    }
                }
            }
        }

        function fetchAddressByCep(destinationInputId, addressInputId, streetInputId, stateInputId) {
            const cepInput = document.getElementById(destinationInputId);
            const addressInput = document.getElementById(addressInputId);
            const streetInput = document.getElementById(streetInputId);
            const stateInput = document.getElementById(stateInputId);
            const cep = cepInput.value.replace(/\D/g, '');

            if (cep.length !== 8) {
                console.error('CEP inválido');
                return;
            }

            const url = `https://viacep.com.br/ws/${cep}/json/`;
            fetch(url)
                .then(response => response.json())
                .then(data => {
                    if (data.erro) {
                        console.error('CEP não encontrado');
                        return;
                    }
                    addressInput.value = data.bairro || '';
                    streetInput.value = data.logradouro || '';
                    stateInput.value = data.uf || '';
                })
                .catch(error => console.error('Error:', error));
        }

        const ctx = document.getElementById('monitoringChart').getContext('2d');
        const chart = new Chart(ctx, {
            type: 'line',
            data: {
                labels: ['Janeiro', 'Fevereiro', 'Março', 'Abril', 'Maio', 'Junho'],
                datasets: [{
                    label: 'Monitoramento de Cargas',
                    borderColor: 'rgb(75, 192, 192)',
                    data: [0, 10, 5, 2, 20, 30],
                    fill: false
                }]
            },
            options: {
                scales: {
                    x: {
                        beginAtZero: true
                    },
                    y: {
                        beginAtZero: true
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top'
                    },
                    title: {
                        display: true,
                        text: 'Monitoramento de Cargas'
                    }
                }
            }
        });

        document.getElementById('freight-form').addEventListener('submit', async function (event) {
            event.preventDefault();
            const formData = new FormData(event.target);

            const productData = {
                origin: formData.get('origin'),
                cep: formData.get('cep'),
                length: parseInt(formData.get('length')) || 0,
                width: parseInt(formData.get('width')) || 0,
                height: parseInt(formData.get('height')) || 0,
                weight: parseFloat(formData.get('weight')) || 0,
                destination: formData.get('destination'),
                address: formData.get('address'),
                street: formData.get('street'),
                state: formData.get('state'),
                number: parseInt(formData.get('number')) || 0,
                complement: formData.get('complement'),
                freightValue: parseFloat(formData.get('freight-value')) || 0,
                additionalInfo: formData.get('additional-info'),
            };

            console.log("Dados do produto a serem enviados: ", productData);

            try {
                const docRef = await addDoc(collection(db, "produtos"), productData);
                console.log("Produto adicionado com ID: ", docRef.id);
                document.getElementById('freight-form').reset();
            } catch (e) {
                console.error("Erro ao adicionar produto: ", e);
            }
        });
    </script>
</body>
</html>


// Importe a biblioteca do Firebase Authentication
import { getAuth, signInWithEmailAndPassword } from "https://www.gstatic.com/firebasejs/9.14.0/firebase-auth.js";

// Obtenha uma instância do Firebase Authentication
const auth = getAuth();

// Faça login com email e senha
signInWithEmailAndPassword(auth, email, password)
  .then((userCredential) => {
    // O usuário fez login com sucesso
    const user = userCredential.user;
    console.log("Usuário logado:", user);
  })
  .catch((error) => {
    // Erro ao fazer login
    const errorCode = error.code;
    const errorMessage = error.message;
    console.error("Erro ao fazer login:", errorCode, errorMessage);
  });


  // const path = require('path');
// const Dotenv = require('dotenv-webpack');
// const CompressionWebpackPlugin = require('compression-webpack-plugin');
// const TerserPlugin = require('terser-webpack-plugin');

// module.exports = {
//     mode: 'production',
//     entry: './src/js/firebaseConfig.js',
//     output: {
//         filename: '[name].bundle.js',
//         path: path.resolve(__dirname, './dist/assets'),
//         clean: true,
//     },
//     module: {
//         rules: [
//             {
//                 test: /\.js$/,
//                 exclude: /node_modules/,
//                 use: {
//                     loader: 'babel-loader',
//                     options: {
//                         presets: ['@babel/preset-env', '@babel/preset-react'],
//                     },
//                 },
//             },
//             {
//                 test: /\.css$/i,
//                 use: ['style-loader', 'css-loader'],
//             },
//         ],
//     },
//     optimization: {
//         minimize: true,
//         minimizer: [new TerserPlugin()],
//         splitChunks: {
//             cacheGroups: {
//                 vendors: {
//                     test: /[\\/]node_modules[\\/]/,
//                     priority: -10,
//                     reuseExistingChunk: true,
//                 },
//                 default: {
//                     minChunks: 2,
//                     priority: -20,
//                     reuseExistingChunk: true,
//                 },
//             },
//             chunks: 'all',
//         },
//     },
//     plugins: [
//         new Dotenv(),
//         new CompressionWebpackPlugin({
//             algorithm: 'gzip',
//         }),
//     ],
// };